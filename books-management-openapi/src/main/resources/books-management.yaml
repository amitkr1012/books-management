openapi: 3.0.3
info:
  title: Book Management Service API
  version: 1.0.0
  description: CRUD + pagination, sorting, optimistic locking with ETags
servers:
  - url: http://localhost:8081/digicert/books/management/v1
tags:
  - name: Manage Books in Library
paths:
  /books:
    get:
      summary: List books with paging & sorting
      operationId: fetchAllBook
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 0 }
        - name: size
          in: query
          schema: { type: integer, default: 20 }
        - name: sort
          in: query
          schema:
            type: array
            items:
              type: string
              example: title,asc
          style: form
          explode: true
      responses:
        '200':
          description: Paged list of books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBook'
    post:
      summary: Create a book
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BookRequest' }
      responses:
        '201':
          description: Created
          headers:
            ETag:
              description: Entity version for optimistic locking
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResultStatus' }

  /books/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: integer, format: int64}
    get:
      summary: Get a book by ID
      operationId: getBookById
      responses:
        '200':
          description: Book found
          headers:
            ETag:
              description: Current version of the resource
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResultStatus' }
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResultStatus'}

    put:
      summary: Replace a book (requires version match)
      operationId: replaceBook
      parameters:
        - name: If-Match
          in: header
          required: true
          description: Version (ETag) of the resource
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BookUpdateRequest' }
      responses:
        '200':
          description: Updated
          headers:
            ETag: { schema: { type: string }, description: New version }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResultStatus' }
        '412':
          description: Version conflict (optimistic locking failure)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResultStatus' }

    patch:
      summary: Update partial fields of a book (requires version match)
      operationId: updateBook
      parameters:
        - name: If-Match
          in: header
          required: true
          description: Version (ETag) of the resource
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BookUpdateRequest' }
      responses:
        '200':
          description: Updated
          headers:
            ETag: { schema: { type: string }, description: New version }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResultStatus' }
        '412':
          description: Version conflict
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResultStatus' }

    delete:
      summary: Delete a book (requires version match)
      operationId: deleteBookById
      parameters:
        - name: If-Match
          in: header
          required: true
          description: Version (ETag) of the resource
          schema: { type: integer }
      responses:
        '200':
          description: Book Deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResultStatus' }
        '204':
          description: Deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResultStatus' }
        '412':
          description: Version conflict
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ResultStatus' }


components:
  schemas:
    BookDTO:
      type: object
      properties:
        id: { type: integer, format: int64 }
        title: { type: string }
        author: { type: string }
        publicationYear: { type: integer }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        version: { type: integer}
    BookRequest:
      type: object
      properties:
        title: { type: string }
        author: { type: string }
        publicationYear: { type: integer }
      required: [title, author]
    BookUpdateRequest:
      type: object
      properties:
        title: { type: string }
        author: { type: string }
        publicationYear: { type: integer }
    PageBook:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/BookDTO' }
        page: { type: integer }
        size: { type: integer }
        totalElements: { type: integer, format: int64 }
        totalPages: { type: integer }
        first: { type: boolean }
        last: { type: boolean }
    ResultStatus:
      type: object
      description: Service ResultStatus
      properties:
        status:
          description: status of service SUCCESS/FAILED
          type: string
        message:
          description: service success/failure Message
          type: string
        bookRes:
          $ref: '#/components/schemas/BookDTO'
      required:
        - status

